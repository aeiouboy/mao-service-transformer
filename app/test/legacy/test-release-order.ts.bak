import { ReleaseOrderTransformationService } from './common/services/release-order-transformation.service';
import { DynamicIdGeneratorService } from './common/services/dynamic-id-generator.service';
import { CalculationService } from './common/services/shared/calculation.service';
import { BusinessRulesService } from './common/services/shared/business-rules.service';
import { TimestampService } from './common/services/shared/timestamp.service';
import { PaymentTransformationService } from './common/services/domain/payment-transformation.service';
import { PaymentMethodTransformationService } from './common/services/domain/payment-method-transformation.service';
import { PaymentTransactionTransformationService } from './common/services/domain/payment-transaction-transformation.service';
import * as fs from 'fs';

// Load sample INPUT order (Thai locale format for 100% accuracy)
const sampleOrderPath = '/Users/chongraktanaka/Projects/mao-service-transformer/data/samples/sample_input_thai.json';
const sampleOrder = JSON.parse(fs.readFileSync(sampleOrderPath, 'utf8'));

// Initialize services with their dependencies
const idGeneratorService = new DynamicIdGeneratorService();
const calculationService = new CalculationService();
const businessRulesService = new BusinessRulesService();
const timestampService = new TimestampService();
const paymentTransactionService = new PaymentTransactionTransformationService(timestampService, idGeneratorService);
const paymentMethodService = new PaymentMethodTransformationService(timestampService, idGeneratorService, paymentTransactionService);
const paymentService = new PaymentTransformationService(timestampService, idGeneratorService, paymentMethodService);

const transformationService = new ReleaseOrderTransformationService(
  idGeneratorService,
  calculationService,
  businessRulesService,
  timestampService,
  paymentService
);

async function runTest() {
  console.log('üîÑ Running order transformation test...');

  try {
    console.log('üìã Sample data structure:');
    console.log('- OrderLine count:', sampleOrder.OrderLine?.length || 'undefined');
    console.log('- OrderNote exists:', !!sampleOrder.OrderNote);
    console.log('- OrderChargeDetail exists:', !!sampleOrder.OrderChargeDetail);
    console.log('- OrderTaxDetail exists:', !!sampleOrder.OrderTaxDetail);
    
    // Run transformation and save to release directory
    const outputPath = await transformationService.saveTransformedOrder(sampleOrder);
    console.log('‚úÖ Transformation completed successfully!');
    console.log(`üìÅ Output file: ${outputPath}`);
    
    // Verify file was created
    if (fs.existsSync(outputPath)) {
      const stats = fs.statSync(outputPath);
      console.log(`üìä File size: ${(stats.size / 1024).toFixed(2)} KB`);
      console.log('üéâ Test passed!');
    } else {
      console.error('‚ùå Output file was not created');
      process.exit(1);
    }
  } catch (error) {
    console.error('‚ùå Transformation failed:', (error as Error).message);
    console.error('Stack trace:', (error as Error).stack);
    process.exit(1);
  }
}

runTest();